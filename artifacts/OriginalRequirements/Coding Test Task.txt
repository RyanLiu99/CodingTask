Your client developed a new optimization model that considers 3 categories: geography, product, and distribution channel. In addition, they developed a script that takes input information about the categories above and other inputs:
- optimization goal: orders (1), units sold (2), or net ROI (3),
- target date range (start/end dates).
That script produces a set of output files with the data that needs to be stored in the database.

Here are the format/content of input files:
- input_geography (attached) represents the hierarchical structure, 
- input_product (attached),
- input_channel (attached),
- input_setup (attached) represents additional inputs ¨C goal (selected option # along with the target value), target date range. It also contains an internal setting ¨C input_increment that¡¯s not going to be exposed to the end user. 

¡®flag_*¡¯ columns indicate user selection of the corresponding category options (those are going to be present in the output files).

In addition to the script itself, there will be some extra files required by the script to run. You can assume that they are stored somewhere (in the test part, use any random files to simulate those). All the generated inputs files, extra files, and the script itself need to be in the same folder to run. Output files are going to be generated by the script in the same folder.

Here are the format/content of output files:
- output_geography (attached) represents a sample distribution of the optimization goal by region, 
- output_product (attached) represents a sample distribution of the optimization goal by product,
- output_channel (attached) represents a sample distribution of the optimization goal by distribution channel,
- output_product_chart (attached) represents a sample distribution of the optimization goal by product by month within the specified target date range. 


Epic: As a system module, I should be able to:
- generate input files for the script using appropriate data in the database,
- run the script,
- process data from output files into the database.

Your tasks:
(1) Break down the epic above into user stories as you see fit. Establish acceptance criteria for each.
(2) Develop data model and corresponding database tables.
(3) Implement the module in Visual Studio using C#. Your code needs to be ready to deploy (once the references to the script and its extra files are set).
(4) As part of that solution, implement unit/integration tests proving that your solution works and meets the acceptance criteria established in (1). 

This is your opportunity to show your coding skills, ability to structure and organize your solution/project(s)/file(s). You will be graded on those in addition to whether your solution works or not. Please, be prepared to justify every decision made in your solution. If something is unclear, make your own assumptions and proceed with those in mind (you will need to state those assumptions when discussing your solution). 
